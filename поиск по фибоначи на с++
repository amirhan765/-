#include <iostream>
#include <vector>
#include <algorithm> // для min

using namespace std;

// Функция для генерации чисел Фибоначчи
int fibonacci(int n) {
    if (n <= 1)
        return n;
    vector<int> fib(n + 2);
    fib[0] = 0;
    fib[1] = 1;
    for (int i = 2; i <= n; i++)
        fib[i] = fib[i - 1] + fib[i - 2];
    return fib[n];
}

// Функция поиска Фибоначчи
int fibonacciSearch(const vector<int>& arr, int x) {
    int n = arr.size();

    // Находим наименьшее число Фибоначчи, большее или равное n
    int fib_m2 = 0; // (m-2)'е число Фибоначчи
    int fib_m1 = 1; // (m-1)'е число Фибоначчи
    int fib_m = fib_m2 + fib_m1;

    // Находим m такое, что F[m] >= n
    while (fib_m < n) {
        fib_m2 = fib_m1;
        fib_m1 = fib_m;
        fib_m = fib_m2 + fib_m1;
    }

    // Маркеры для элементов, которые не входят в массив
    int offset = -1;

    // Поиск
    while (fib_m > 1) {
        // Проверяем возможный индекс
        int i = min(offset + fib_m2, n - 1);

        if (arr[i] < x) {
            fib_m = fib_m1;
            fib_m1 = fib_m2;
            fib_m2 = fib_m - fib_m1;
            offset = i;
        } else if (arr[i] > x) {
            fib_m = fib_m2;
            fib_m1 = fib_m1 - fib_m2;
            fib_m2 = fib_m - fib_m1;
        } else {
            return i; // найден
        }
    }

    // Проверяем последний элемент
    if (fib_m1 && offset + 1 < n && arr[offset + 1] == x)
        return offset + 1;

    return -1; // не найден
}

int main() {
    vector<int> arr = {10, 22, 35, 40, 45, 50, 80, 82, 85, 90, 100};
    int x = 85;

    int result = fibonacciSearch(arr, x);

    if (result != -1)
        cout << "Элемент найден на позиции: " << result << endl;
    else
        cout << "Элемент не найден" << endl;

    return 0;
}
